package es.in2.issuer.domain.model;

import es.in2.issuer.domain.model.CredentialOfferForPreAuthorizedCodeFlow;
import es.in2.issuer.domain.model.Grant;
import org.junit.jupiter.api.Test;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;

class CredentialOfferForPreAuthorizedCodeFlowTest {

    @Test
    void testConstructorAndGetters() {
        // Arrange
        String expectedCredentialIssuer = "https://credential-issuer.example.com";
        List<CredentialOfferForPreAuthorizedCodeFlow.Credential> expectedCredentials = List.of(CredentialOfferForPreAuthorizedCodeFlow.Credential.builder().format("format").types(List.of("type")).build());
        Map<String, Grant> expectedGrants = new HashMap<>();
        expectedGrants.put("grant1", new Grant("type1", false));
        expectedGrants.put("grant2", new Grant("type2", false));
        // Act
        CredentialOfferForPreAuthorizedCodeFlow credentialOffer = new CredentialOfferForPreAuthorizedCodeFlow(
                expectedCredentialIssuer,
                expectedCredentials,
                expectedGrants
        );
        // Assert
        assertEquals(expectedCredentialIssuer, credentialOffer.credentialIssuer());
        assertEquals(expectedCredentials, credentialOffer.credentials());
        assertEquals(expectedGrants, credentialOffer.grants());
    }

    @Test
    void testSetters() {
        // Arrange
        String newCredentialIssuer = "https://new-credential-issuer.example.com";
        List<CredentialOfferForPreAuthorizedCodeFlow.Credential> newCredentials = List.of(CredentialOfferForPreAuthorizedCodeFlow.Credential.builder().format("format").types(List.of("type")).build());
        Map<String, Grant> newGrants = new HashMap<>();
        // Act
        CredentialOfferForPreAuthorizedCodeFlow credentialOfferForPreAuthorizedCodeFlow = CredentialOfferForPreAuthorizedCodeFlow.builder().credentialIssuer(newCredentialIssuer).credentials(newCredentials).grants(newGrants).build();
        // Assert
        assertEquals(newCredentialIssuer, credentialOfferForPreAuthorizedCodeFlow.credentialIssuer());
        assertEquals(newCredentials, credentialOfferForPreAuthorizedCodeFlow.credentials());
        assertEquals(newGrants, credentialOfferForPreAuthorizedCodeFlow.grants());
    }

    @Test
    void lombokGeneratedMethodsTest() {
        // Arrange
        String expectedCredentialIssuer = "https://credential-issuer.example.com";
        List<CredentialOfferForPreAuthorizedCodeFlow.Credential> expectedCredentials = List.of(CredentialOfferForPreAuthorizedCodeFlow.Credential.builder().format("format").types(List.of("type")).build());
        Map<String, Grant> expectedGrants = new HashMap<>();
        expectedGrants.put("grant1", new Grant("type1", false));
        expectedGrants.put("grant2", new Grant("type2", false));
        // Act
        CredentialOfferForPreAuthorizedCodeFlow offer1 = new CredentialOfferForPreAuthorizedCodeFlow(
                expectedCredentialIssuer,
                expectedCredentials,
                expectedGrants
        );
        CredentialOfferForPreAuthorizedCodeFlow offer2 = new CredentialOfferForPreAuthorizedCodeFlow(
                expectedCredentialIssuer,
                expectedCredentials,
                expectedGrants
        );
        // Assert
        assertEquals(offer1, offer2); // Tests equals() method generated by Lombok
        assertEquals(offer1.hashCode(), offer2.hashCode()); // Tests hashCode() method generated by Lombok
    }

}
