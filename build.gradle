plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.4'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'jacoco'
}

group = 'es.in2'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

jacoco {
	toolVersion = '0.8.7'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { setUrl('https://jitpack.io') }
	maven { setUrl('https://maven.walt.id/repository/waltid/') }
	maven { setUrl('https://maven.walt.id/repository/waltid-ssi-kit/') }
	maven { setUrl('https://repo.danubetech.com/repository/maven-public/') }
}

dependencies {

	// Spring Boot
	implementation 'org.springframework.boot:spring-boot-starter-webflux' exclude(group: 'org.springframework.boot', module: 'spring-boot-starter-reactor-jetty')
	implementation 'org.springframework.boot:spring-boot-starter-tomcat'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'

	// Documentation
	implementation 'org.springdoc:springdoc-openapi-starter-webflux-ui:2.2.0'

	// CBOR
	implementation('com.upokecenter:cbor:4.5.2')

	// COSE
	implementation('com.augustcellars.cose:cose-java:1.1.0')

	// Compress
	implementation('org.apache.commons:commons-compress:1.20')

	// Base 45
	implementation('io.github.ehn-digital-green-development:base45:0.0.3')

	// walt.id
	// https://github.com/walt-id/waltid-ssikit
	// to update this versions go to
	// https://maven.walt.id/repository/waltid-ssi-kit/id/walt/waltid-sd-jwt-jvm/
	// https://maven.walt.id/repository/waltid-ssi-kit/id/walt/waltid-ssikit
	// and pick the one with the newest version number
	// make sure to update all other implementations in wallet
	implementation('id.walt:waltid-ssikit:1.2308021811.0'){
		// conflict with swagger-model from openapi-starter dependency when app is containerized
		exclude group: 'io.swagger.core.v3', module: 'swagger-models'
	}
	implementation('id.walt:waltid-sd-jwt-jvm:1.2306191408.0')
	implementation('id.walt.servicematrix:WaltID-ServiceMatrix:1.1.3')


	// Lombok
	compileOnly('org.projectlombok:lombok:1.18.26')
	annotationProcessor('org.projectlombok:lombok:1.18.26')
	testCompileOnly('org.projectlombok:lombok:1.18.26')
	testAnnotationProcessor('org.projectlombok:lombok:1.18.26')

	// Nimbus-jjwt
	implementation('com.nimbusds:nimbus-jose-jwt:9.30.2')
	implementation('io.jsonwebtoken:jjwt-api:0.11.5')
	runtimeOnly('io.jsonwebtoken:jjwt-impl:0.11.5')
	runtimeOnly('io.jsonwebtoken:jjwt-jackson:0.11.5')

	// AZURE
	implementation('com.azure.spring:spring-cloud-azure-starter-appconfiguration:5.7.0')
	implementation('com.azure.spring:spring-cloud-azure-starter-keyvault-secrets:5.7.0')

	// Testing
	testImplementation('org.springframework.security:spring-security-test')
	testImplementation('org.springframework.boot:spring-boot-starter-test')
	testImplementation('org.springframework.boot:spring-boot-starter-aop')
	testImplementation('org.junit.jupiter:junit-jupiter-api:5.8.1')
	testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.8.1')
	testImplementation ('io.projectreactor:reactor-test')
	testImplementation('io.mockk:mockk:1.13.5')
	testImplementation ('org.mockito:mockito-inline:3.11.2')
	testImplementation('com.squareup.okhttp3:mockwebserver:4.12.0')
	testImplementation('com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.12.4')
}

configurations.configureEach {
	exclude module: 'slf4j-simple'
}

tasks.named('compileJava') {
	inputs.files(tasks.named('processResources'))
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy(tasks.jacocoTestReport)
}

tasks.jacocoTestReport {
	dependsOn(tasks.test)
	reports {
		xml.required.set(true)
		csv.required.set(false)
		html.outputLocation.set(layout.buildDirectory.dir("jacocoHtml"))
	}

	classDirectories.setFrom(files(classDirectories.files.collect {
		fileTree(dir: it, exclude: [
				"**/IssuerVciBackendApplication**",
				"**/CredentialResponseErrorCodes**",
				"**/configurations/**",
				"**/handler/**",
				"**/**Serializer**/**",
				"**/enums/**",
				"**/Constants**"
		])
	}))
}